generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String        @unique
  passwordHash  String?       @map("password_hash")
  name          String?
  phone         String?
  emailVerified DateTime?     @map("email_verified")
  image         String?
  deletedAt     DateTime?     @map("deleted_at") @db.Timestamptz(6)
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime      @default(now()) @map("updated_at") @db.Timestamptz(6)
  accounts      Account[]
  properties    Property[]
  sessions      Session[]
  transactions  Transaction[]
  monthlyMetrics MonthlyMetrics[]

  @@index([deletedAt])
  @@map("users")
}

model Property {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  address       String
  city          String?
  state         String?
  zipCode       String?         @map("zip_code")
  country       String?
  purchasePrice Decimal?        @map("purchase_price") @db.Decimal(12, 2)
  marketValue   Decimal?        @map("market_value") @db.Decimal(12, 2)
  isActive      Boolean         @default(true) @map("is_active")
  deletedAt     DateTime?       @map("deleted_at") @db.Timestamptz(6)
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime        @default(now()) @map("updated_at") @db.Timestamptz(6)
  userId        String          @map("user_id") @db.Uuid
  rent          Decimal         @default(0) @db.Decimal(12, 2)
  tenants       Int             @default(0)
  type          PropertyType    @default(APARTMENT)
  occupancy     OccupancyStatus @default(AVAILABLE)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  monthlyMetrics MonthlyMetrics[]

  @@index([userId])
  @@index([isActive])
  @@index([deletedAt])
  @@index([occupancy])
  @@map("properties")
}

model Category {
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String          @unique
  type         TransactionType
  description  String?
  isActive     Boolean         @default(true) @map("is_active")
  createdAt    DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime        @default(now()) @map("updated_at") @db.Timestamptz(6)
  transactions Transaction[]

  @@index([type])
  @@index([isActive])
  @@map("categories")
}

model Transaction {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount          Decimal         @db.Decimal(12, 2)
  type            TransactionType
  description     String?
  transactionDate DateTime        @map("transaction_date") @db.Date
  isRecurring     Boolean         @default(false) @map("is_recurring")
  deletedAt       DateTime?       @map("deleted_at") @db.Timestamptz(6)
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime        @default(now()) @map("updated_at") @db.Timestamptz(6)
  userId          String          @map("user_id") @db.Uuid
  propertyId      String          @map("property_id") @db.Uuid
  categoryId      String          @map("category_id") @db.Uuid
  category        Category        @relation(fields: [categoryId], references: [id])
  property        Property        @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, propertyId])
  @@index([userId, type])
  @@index([deletedAt])
  @@index([transactionDate])
  @@index([propertyId, type])
  @@map("transactions")
}


model MonthlyMetrics {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  propertyId       String   @map("property_id") @db.Uuid
  userId           String   @map("user_id") @db.Uuid
  year             Int
  month            Int      // 1-12
  totalIncome      Decimal  @default(0) @map("total_income") @db.Decimal(12, 2)
  totalExpenses    Decimal  @default(0) @map("total_expenses") @db.Decimal(12, 2)
  netIncome        Decimal  @default(0) @map("net_income") @db.Decimal(12, 2)
  transactionCount Int      @default(0) @map("transaction_count")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  property         Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([propertyId, year, month])
  @@index([propertyId])
  @@index([userId])
  @@index([year, month])
  @@map("monthly_metrics")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum PropertyType {
  APARTMENT
  HOUSE
  STUDIO
  TOWNHOUSE
  VILLA
  COMMERCIAL
  OFFICE
  RETAIL
  WAREHOUSE
  MIXED_USE
  OTHER
}

enum OccupancyStatus {
  AVAILABLE
  OCCUPIED
}
