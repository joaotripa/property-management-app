generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

// Enums - SCREAMING_SNAKE_CASE
enum TransactionType {
  INCOME
  EXPENSE
}

enum PropertyType {
  APARTMENT
  HOUSE
  STUDIO
  TOWNHOUSE
  VILLA
  COMMERCIAL
  OFFICE
  RETAIL
  WAREHOUSE
  MIXED_USE
  OTHER
}

// Models

model User {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String   @unique
  passwordHash  String   @map("password_hash")
  name          String?
  phone         String?
  emailVerified Boolean  @default(false) @map("email_verified")
  createdAt     DateTime @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt     DateTime @default(now()) @db.Timestamptz(6) @map("updated_at")

  // Relationships
  properties    Property[]
  transactions  Transaction[]

  @@map("users")
}

model Property {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  address       String
  city          String?
  state         String?
  zipCode       String?      @map("zip_code")
  country       String?      // Country (for multi-country landlords)
  purchasePrice Decimal?     @db.Decimal(12, 2) @map("purchase_price")
  propertyType  PropertyType @default(APARTMENT) @map("property_type")
  isActive      Boolean      @default(true) @map("is_active")
  createdAt     DateTime     @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt     DateTime     @default(now()) @db.Timestamptz(6) @map("updated_at")

  // Foreign Keys
  userId        String       @db.Uuid @map("user_id")

  // Relationships
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]

  // Indexes for performance
  @@index([userId])
  @@index([isActive])
  @@map("properties")
}

model Category {
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String          @unique
  type         TransactionType
  description  String?
  isActive     Boolean         @default(true) @map("is_active")
  createdAt    DateTime        @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt    DateTime        @default(now()) @db.Timestamptz(6) @map("updated_at")

  // Relationships
  transactions Transaction[]

  // Constraints
  @@index([type])
  @@index([isActive])
  @@map("categories")
}

model Transaction {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount          Decimal         @db.Decimal(12, 2)
  type            TransactionType
  description     String?
  transactionDate DateTime        @db.Date @map("transaction_date")
  isRecurring     Boolean         @default(false) @map("is_recurring") // For future recurring feature
  createdAt       DateTime        @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt       DateTime        @default(now()) @db.Timestamptz(6) @map("updated_at")

  // Foreign Keys
  userId          String          @db.Uuid @map("user_id")
  propertyId      String          @db.Uuid @map("property_id")
  categoryId      String          @db.Uuid @map("category_id")

  // Relationships
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  property        Property        @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  category        Category        @relation(fields: [categoryId], references: [id])

  // Indexes for performance and reporting
  @@index([userId, propertyId])
  @@index([userId, type])
  @@index([transactionDate])
  @@index([propertyId, type])
  @@map("transactions")
}